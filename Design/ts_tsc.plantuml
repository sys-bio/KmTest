@startuml

TimeSeriesCollection o-- TimeSeries

'TimeSeries *-- SteadyState

class TimeSeriesCollection {
    +time_series_dict : dict of species_str to TimeSeries object
    +add_time_series(TimeSeries ts) : void
    +get_time_series(string species) : TimeSeries
    +get_all_time_series() : list of TimeSeries
    +get_number_of_time_series() : int
}

class TimeSeries {
    +specie : string
    +time_points : list
    +values : list
    +steady_states : list of SteadyState
    +get_specie() : string
    +get_time_points() : list
    +get_values() : list
    +get_value_at_time(int time_point) : int
    +replace_values_at(list time_points, list new_values) : void
}

'class SteadyState {
'    +time_point : int
'    +value : int
'    +get_time() : int
'    +get_value() : int
'    +equal(SteadyState target, int time_tol=TTOL, int value_tol=VTOL) : boolean
'    +compare_to_time(SteadyState target, int low, int high) : boolean
'    +compare_to_time(SteadyState target, int time_tol=TTOL) : boolean
'    +compare_to_value(SteadyState target, int low, int high) : boolean
'    +compare_to_value(SteadyState target, int value_tol=VTOL) : boolean
'}

note left of TimeSeriesCollection::get_time_series {
    returns the TimeSeries object of the input specie
}

note right of TimeSeries::time {
    len(time) = number_of_points
    time[0] = time_start
    time[len(time) - 1] = time_end
}

note right of TimeSeries::steady_state {
    the steady-state representation of this time series
}

note left of SteadyState::time {
    time point when steady-state is reached
}

note right of SteadyState::value {
    value when steady-state is reached
}

note right of SteadyState::equal {
    returns true iff the steady-state of both species
    is reached at the value and time within
    the tolerance range
}

note left of SteadyState::compare_to_time {
    returns true iff the steady-state of this species
    is reached at time that is [low, high] time points later
    than the input steady state
}

note right of SteadyState::compare_to_value {
    returns true iff the steady-state of this species
    is reached at value that is [low, high] times greater
    than the input steady state
}

@enduml